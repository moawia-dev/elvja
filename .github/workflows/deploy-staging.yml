name: Deploy Staging
on:
  push:
    branches: [ staging ]
  workflow_dispatch:
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/elvja-backend:${{ github.sha }}
      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/elvja-frontend:${{ github.sha }}
      - name: Set images
        run: |
          echo "BACKEND_IMAGE=ghcr.io/${{ github.repository_owner }}/elvja-backend:${{ github.sha }}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=ghcr.io/${{ github.repository_owner }}/elvja-frontend:${{ github.sha }}" >> $GITHUB_ENV
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd ~/elvja
            export DOMAIN=${{ secrets.STAGING_DOMAIN }}
            export EMAIL=${{ secrets.STAGING_EMAIL }}
            export BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}
            export FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}
            export S3_BUCKET=${{ secrets.S3_BUCKET }}
            export S3_REGION=${{ secrets.S3_REGION }}
            export CDN_BASE=${{ secrets.CDN_BASE }}
            docker compose -f docker-compose.staging.yml pull || true
            docker compose -f docker-compose.staging.yml up -d
  smoke:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Smoke test
        run: |
          for i in {1..20}; do
            code=$(curl -k -s -o /dev/null -w "%{http_code}" https://${{ secrets.STAGING_DOMAIN }}/api/health || true)
            echo "Attempt $i -> $code"; [ "$code" = "200" ] && exit 0; sleep 5;
          done
          exit 1
